{"name":"isbndb","tagline":"Ruby ISBNdb is a simple, Ruby library that connects to ISBNdb.com's Web Service and API.","body":"Ruby ISBNdb\r\n===========\r\nRuby ISBNdb is a simple, Ruby library that connects to [ISBNdb.com's Web Service](http://isbndb.com) and API. Ruby ISBNdb is written to mimic the ease of ActiveRecord and other ORM programs, without all the added hassles. It's still in beta phases, but it is almost fully functional for the basic search features of ISBNdb.\r\n\r\nVersion 1.x\r\n-----------\r\n*ISBNdb 1.x.x has been deprecated!*. You should upgrade to the new version as soon as possible. The old documentation is still available in the [git history](https://github.com/sethvargo/isbndb/tree/75cfe76d096f92b2dfaf1c1b42d7c84ff86fcbc0). There are *significant* changes in this new version, so please test appropriately.\r\n\r\nInstallation\r\n------------\r\nTo get started, install the gem:\r\n\r\n    gem install isbndb\r\n\r\nAlternatively, you can add it to your Gemfile:\r\n\r\n```ruby\r\ngem 'isbndb', '~> 2.0.0'\r\n```\r\n\r\nBasic Setup\r\n-----------\r\nTo get started, you'll need to create a `config/isbndb.yml` file in your project root. It should look like this:\r\n\r\n```yml\r\naccess_keys:\r\n  - KEY_1\r\n  - KEY_2\r\n  ...\r\n```\r\n\r\nWhere you list your access keys. This was in response to security holes in version 1.x where values were passed directly to the initializer.\r\n\r\nNow you're ready to get started:\r\n\r\n```ruby\r\n@query = ISBNdb::Query.find_book_by_title('Ruby')\r\n```\r\n\r\nActiveRecord-like Usage\r\n-----------------------\r\nAnother reason why you'll love Ruby ISBNdb is it's similarity to ActiveRecord. In fact, it's *based* on ActiveRecord, so it should look similar. It's best to lead by example, so here are a few ways to search for books, authors, etc:\r\n\r\n```ruby\r\nISBNdb::Query.find_book_by_isbn(\"978-0-9776-1663-3\")\r\nISBNdb::Query.find_books_by_title(\"Agile Development\")\r\nISBNdb::Query.find_author_by_name(\"Seth Vargo\")\r\nISBNdb::Query.find_publisher_by_name(\"Pearson\")\r\n```\r\n\r\nAdvanced Usage\r\n--------------\r\nAdditionally, you can also use a more advanced syntax for complete control:\r\n\r\n```ruby\r\nISBNdb::Query.find(:collection => 'books', :where => { :isbn => '978-0-9776-1663-3' })\r\nISBNdb::Query.find(:collection => 'books', :where => { :author => 'Seth Vargo' }, :results => 'prices')\r\n```\r\n\r\nOptions for `:collection` include **books**, **subjects**, **categories**, **authors**, and **publishers**.\r\n\r\nIf you are unfamiliar with some of these options, have a look at the [ISBNdb API](http://isbndb.com/docs/api/)\r\n\r\nProcessing Results\r\n------------------\r\nA `ResultSet` is nothing more than an enhanced array of `Result` objects. The easiest way to process results from Ruby ISBNdb is most easily done using the `.each` method.\r\n\r\n```ruby\r\nresults = ISBNdb::Query.find_books_by_title(\"Agile Development\")\r\nresults.each do |result|\r\n  puts \"title: #{result.title}\"\r\n  puts \"isbn10: #{result.isbn}\"\r\n  puts \"authors: #{result.authors_text}\"\r\nend\r\n```\r\n\r\n**Note**: calling a method on a `Result` object that is `empty?`, `blank?`, or `nil?` will *always* return `nil`. This was a calculated decision so that developers can do the following:\r\n\r\n```ruby\r\nputs \"title: #{result.title}\" unless result.title.nil?\r\n```\r\n\r\nversus\r\n\r\n```ruby\r\nputs \"title: #{result.title}\" unless result.title.nil? || result.title.blank? || result.title.empty?\r\n```\r\n\r\nbecause ISBNdb.com API is generally inconsistent with respect to returning empty strings, whitespace characters, or nothing at all.\r\n\r\n**Note**: XML-keys to method names are inversely mapped. CamelCased XML keys and attributes (like BookData or TitleLong) are converted to lowercase under_scored methods (like book_data or title_long). ALL XML keys and attributes are mapped in this way.\r\n\r\nPagination\r\n----------\r\nPagination is based on the `ResultSet` object. The `ResultSet` object contains the methods `go_to_page`, `next_page`, and `prev_page`... Their function should not require too much explanation. Here's a basic example:\r\n\r\n```ruby\r\nresults = ISBNdb::Query.find_books_by_title(\"ruby\")\r\nresults.next_page.each do |result|\r\n  puts \"title: #{result.title}\"\r\nend\r\n```\r\n\r\nA more realistic example - getting **all** books of a certain title:\r\n\r\n```ruby\r\nresults = ISBNdb::Query.find_books_by_title(\"ruby\")\r\nwhile results\r\n  results.each do |result|\r\n    puts \"title: #{title}\"\r\n  end\r\n\r\n  results = results.next_page\r\nend\r\n```\r\n\r\nIt seems incredibly unlikely that a developer would ever use `prev_page`, but it's still there if you need it.\r\n\r\nBecause there may be cases where a developer may need a specific page, the `go_to_page` method also exists. Consider an example where you batch-process books into your own database (which is probably against Copyright laws, but you don't seem to care...):\r\n\r\n```ruby\r\nresults = ISBNdb::Query.find_books_by_title(\"ruby\")\r\nresults = results.go_to_page(50) # where 50 is the page number you want\r\n```\r\n\r\n**Note**: `go_to_page`, `next_page` and `prev_page` return `nil` if the `ResultSet` is out of `Result` objects. If you try something like `results.next_page.next_page`, you could get a whiny nil. Think `LinkedLists` when working with `go_to_page`, `next_page` and `prev_page`.\r\n\r\n**BIGGER NOTE**: `go_to_page`, `next_page` and `prev_page` BOTH make a subsequent call to the API, using up one of your 500 daily request limits. Please keep this in mind!\r\n\r\nAdvanced Key Management\r\n-----------------------\r\nAs over version 2.0, all access key management has moved into the `config/isbndb.yml` file. ISBNdb will auto-rollover if you specify multiple keys.\r\n\r\nStatistics\r\n----------\r\nRuby ISBNdb now supports basic statistics (from the server):\r\n\r\n```ruby\r\nISBNdb::Query.keystats # => {:requests => 50, :granted => 49}\r\nISBNdb::Query.keystats[:granted] # => 49\r\n```\r\n\r\n**Note**: Ironically, this information also comes from the server, so it counts as a request...\r\n\r\nExceptions\r\n----------\r\nRuby ISBNdb could raise the following possible exceptions:\r\n\r\n```ruby\r\nISBNdb::AccessKeyError\r\n```\r\n\r\nYou will most likely encounter `ISBNdb::AccessKeyError` when you have reached your 500-request daily limit. `ISBNdb::InvalidURIError` usually occurs when using magic finder methods with typographical errors.\r\n\r\nA Real-Life Example\r\n-------------------\r\nHere is a real-life example of how to use Ruby ISBNdb. Imagine a Rails application that recommends books. You have written a model, `Book`, that has a variety of methods. One of those class methods, `similar`, returns a list of book isbn values that are similar to the current book. Here's how one may do that:\r\n\r\n```ruby\r\n# books_controller.rb\r\ndef simliar\r\n  @book = Book.find(params[:id])\r\n  @query = ISBNdb::Query.new(['API-KEY-1', 'API-KEY-2'])\r\n  @isbns = @book.similar # returns an array like [1234567890, 0987654321, 3729402827...]\r\n\r\n  @isbns.each do |isbn|\r\n    begin\r\n      (@books ||= []) << ISBNdb::Query.find_book_by_isbn(isbn).first\r\n    rescue ISBNdb::AccessKeyError\r\n      SomeMailer.send_limit_email.deliver!\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n```ruby\r\n# similar.html.erb\r\n<h1>The following books are recommeded for you:</h1>\r\n<% @books.each do |book| %>\r\n  <div class=\"book\">\r\n    <h2><%= book.title_long %></h2>\r\n    <p><strong>authors</strong>: <%= book.authors_text %></p>\r\n  </div>\r\n<% end %>\r\n```\r\n\r\nTesting\r\n-------\r\n[![Build Status](http://travis-ci.org/sethvargo/isbndb.png)](http://travis-ci.org/sethvargo/isbndb)\r\n\r\nChange Log\r\n----------\r\n2012-6-17 - Released v2.0\r\n2011-3-11 - Officially changed from ruby_isbndb to isbndb with special thanks to [Terje Tjervaag](https://github.com/terje) for giving up the gem name :)\r\n\r\nAcknowledgments\r\n----------------\r\nSpecial thanks to Terje Tjervaag (https://github.com/terje) for giving up the gem name 'isbndb'!\r\n\r\nSpecial thanks to Lazlo (https://github.com/lazlo) for forwarding his project here!\r\n","google":"UA-12012976-15","note":"Don't delete this file! It's used internally to help with page regeneration."}